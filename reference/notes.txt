Section 13 - Observables Notes

What is Observables
    Sejatinya adalah Data Source
    Di angular, adalah object yang mengimport dari third party package rxjs
    Observable pattern : 
        Ada observable, ada observer. Di antaranya ada stream (timeline). Di timeline ini bisa ada multiple events yang di emit dari observable
    Observer : Adalah kode yang kita buat, misalnya function subscribe()
    Terdapat 3 cara untuk observable:
        Handle Data
        Handle Error
        Handle Completion : Tidak selalu complete.
    Observables biasanya untuk asynchronous task, kita tidak tahu kapan akan terjadi dan terjadi berapa lama.
    Observables itu adalah alternatif dari promise.

    Params adalah observable, this.route.params.subscribe

    Build a new observable from rxjs 
    import { interval } from 'rxjs'
    interval(1000).subscribe(
        (count) => {
            console.log(count);
        }
    )

    Ada observable yang jalan terus, ada yang enggak seperti hppt request.
    Hati hati karena observable bisa bertambah terus. Harus disimpan.

    private firstObsSubscription: Subscription

    ngOnDestroy(): void {
        this.firstObsSubscription.unsubscribe();
    }



    const customIntervalObservable = Observable.create(observer => {
        let count = 0;
        setInterval(() => {
            observer.next(count)
            count++;
        })
    });

    customIntervalObservable.subscribe(

    );

    .next() -> Emit a new value
    .error()
    .complete()

    observer.error(new Error('blasblas'));
    Error akan mengunsubscribe observable. 

    .complete() akan menbhentikan observable, gak perlu unsubscribe.
    () => complete function 

    Kita akan sangat jarang membuat observable sendiri. Ada librarynya di angular.

    Operators : Magic Features of rxjs 

    Ditaro in between Observable dan Subscription

    Pipe method(). 
    import { map } from 'rxjs/operators'
    customIntervalObservable.pipe(map(data: number => {
        return 'Round ' + (data+1);
    })).subscribe...

    Understanding rxjs di academind. 

    map(), filter()

    Pipe dapat menerima unlimited arguments(operator yang diimport dari rxjs);

    import { Subject } from 'rxjs' : Pengganti event emitter 
    Don't use eventemitter, use subject.

    65m

    Subject lebih active dari observable 
    Active : Can be triggered from code.

    Use subject to communicate cross component through service

